///////////////////////////////
//////Modelo de Ising /////////
///////////////////////////////
#include <math.h>
#include <stdio.h>
//#include <stdlib.h> //Contiene la función valor absoluto
#include "gsl_rng.h"

#define N 16 //Tamaño de mi red cuadrada bidimensional N²
//#define T 1.7  //Temperatura Te[0,5]
#define ORDEN 0 //1 para la configuración ordenada, otro número para desordenada


gsl_rng *tau; //Variable externa


int main()
{
    int i, j, DeltaE;
    double s[N][N];
    double T;
    int n, m;     //Configuración aleatoria inicial (n,m)
    int pMC, l, t, q, contador;
    double x, p, xi; //Probabilidad y número aleatorio xi
    int paso;

    //Magnetización y error
    double sumaMag[10000], Mag[10000], MagPro;
    double sigma, errorMag;

    //Energía media y error
    double sumaE[10000], E[10000], EPro;
    double sigma_energia, errorE;

    //Calor específico y error
    double E2[10000], E3[10000];
    double E2Pro, EPro2, CalorEsp;
    double sigma_calor, errorCalor;

    //Función de correlación y error
    double correl[10000][N], fcorr[N];
    double sigmafcorr[N], errorfcorr[N];
   
    //Números aleatorios
    extern gsl_rng *tau; //Hay que volver a definir el puntero como variable externa

    int semilla=183365; //Inicializo el generador
    tau=gsl_rng_alloc(gsl_rng_taus);
    gsl_rng_set(tau,semilla);

    //Declaración de ficheros
    FILE *f1, *f2, *f3, *f4, *f5;
    //f1 = fopen("ising.txt", "w");
    f2 = fopen("Magnetizacion", "w");
    f3 = fopen("EnergiaMedia", "w");
    f4 = fopen("CalorEspecifico", "w");
    f5 = fopen("FuncionCorrelacion_N16", "w");


    T = 1.5;
    while(T<3.6)
    {
        if (ORDEN==1) //CONFIGURACIÓN ORDENADA
        {
            for (i=0;i<=N-1;i++)
            {
                for (j=0;j<=N-1;j++)
                {
                    s[i][j]=1; 
                    //printf("%i\t%i\t%i\n", i, j, s[i][j]);
                }    
            }
        }
        else        //CONFIGURACIÓN DESORDENADA
        {
            for (i=0;i<=N-1;i++)
            {
                for (j=0;j<=N-1;j++)
                {
                    x=gsl_rng_uniform(tau); //Genero un número aleatorio entre 0 y 1
                    if (x<0.5)
                    {
                        s[i][j]=1; 
                        //printf("%i\t%i\t%i\n", i, j, s[i][j]);
                    } 
                    else
                    {
                        s[i][j]=-1;
                    }            

                }    
            }        
        }
        
       
        contador=0;
        for (pMC=1;pMC<=1000000; pMC++)
        {
            for (l=1;l<=N*N;l++)
            {
                //printf ("%i\t%i\t%i\n", k, l, s[n][m]);
                //Elijo (n,m) aleatoriamente
                n=gsl_rng_uniform_int(tau,N);
                m=gsl_rng_uniform_int(tau,N);
                //printf("%i\t%i\n", n, m);

                //////////////////////////////////////////////////////////////////////////// 
                ///////Calculo la probabilidad P de encontrar una configuración (n,m)///////
                ////////////////////////////////////////////////////////////////////////////

                //Tengo que tener en cuenta las condiciones de contorno y estudiar las cuatro
                //esquinas, los cuatro bordes y el interior

                //Esquina superior izquierda
                if (n==0 && m==N-1)
                {
                    DeltaE=2*s[0][N-1]*(s[1][N-1]+s[N-1][N-1]+s[0][0]+s[0][N-2]);
                }
                //Esquina superior derecha
                else if (n==N-1 && m==N-1)
                {
                    DeltaE=2*s[N-1][N-1]*(s[0][N-1]+s[N-2][N-1]+s[N-1][0]+s[N-1][N-2]);
                }
                //Esquina inferior izquierda
                else if (n==0 && m==0)
                {
                    DeltaE=2*s[0][0]*(s[1][0]+s[N-1][0]+s[0][1]+s[0][N-1]);        
                }
                //Esquina inferior derecha
                else if (n==N-1 && m==0)
                {
                    DeltaE=2*s[N-1][0]*(s[0][0]+s[N-2][0]+s[N-1][1]+s[N-1][N-1]);        
                }
                //Borde superior
                else if (n!=0 && n!=N-1 && m==N-1)
                {
                    DeltaE=2*s[n][N-1]*(s[n+1][N-1]+s[n-1][N-1]+s[n][0]+s[n][N-2]);        
                }
                //Borde inferior
                else if (n!=0 && n!=N-1 && m==0)
                {
                    DeltaE=2*s[n][0]*(s[n+1][0]+s[n-1][0]+s[n][1]+s[n][N-1]);       
                }
                //Borde derecho
                else if (n==N-1 && m!=0 && m!=N-1)
                {
                    DeltaE=2*s[N-1][m]*(s[0][m]+s[N-2][m]+s[N-1][m+1]+s[N-1][m-1]);        
                }
                //Borde izquierdo
                else if (n==0 && m!=0 && m!=N-1)
                {
                    DeltaE=2*s[0][m]*(s[1][m]+s[N-1][m]+s[0][m+1]+s[0][m-1]);        
                }
                //Interior
                else 
                {
                    DeltaE=2*s[n][m]*(s[n+1][m]+s[n-1][m]+s[n][m+1]+s[n][m-1]);        
                }

                //Calculo la probabilidad

                //printf("%i\t%lf\n", DeltaE, exp(-1.0*DeltaE/T)); //DeltaE es int, por lo que tengo
                //que convertirlo en double para hacer la división

                p = fmin(1, exp(-1.0*DeltaE/T));
                //printf("%lf\n", p);

                //Genero un número aleatorio uniforme comprendido entre [0,1]
                xi = gsl_rng_uniform(tau);
                //printf("%lf\n", xi);

                if (xi < p) 
                {
                    s[n][m] = -s[n][m];
                }
        



            }//bucle l

            for (t=0;t<=N-1;t++)
            {
                for(q=0;q<=N-1;q++)
                {
                    //printf("%i\t%i\t%i\t", t, q, 2+s[t][q]);
                    //fprintf(f1,"%i\t%i\t%lf\t", t, q, 2+s[t][q]);
                }
            }
            contador++;
            //printf("%i\n", contador);
            //fprintf(f1, "\n");
            printf("%i\n", contador);


            if (pMC%100 == 0)
            {
                paso = (pMC/100) - 1;

                //----------------------MAGNETIZACIÓN-------------------------//
                    
                sumaMag[paso] = 0.;
                Mag[paso] = 0.;

                //Calculo la magnetización 
                //printf("Magnetizacion\n");
                for (i=0; i<=N-1; i++)
                {
                    for (j=0; j<=N-1; j++)
                    {
                        sumaMag[paso] = sumaMag[paso] + s[i][j]/(N*N);
                        //printf("%lf\t%lf\n", s[i][j], sumaMag[paso]);
                    }
                }
                Mag[paso] = fabs(sumaMag[paso]);
                //printf("%i\t%lf\n", paso, Mag[paso]);
                //-----------------------------------------------------------//


                //-----------------------ENERGÍA MEDIA-----------------------//
                sumaE[paso] = 0.;

                for (n=0; n<=N-1; n++)
                {
                    for (m=0; m<=N-1; m++)
                    {
                        //Esquina superior izquierda
                        if (n==0 && m==N-1)
                        {
                            sumaE[paso] += s[0][N-1]*(s[1][N-1]+s[N-1][N-1]+s[0][0]+s[0][N-2]);
                        }
                        //Esquina superior derecha
                        else if (n==N-1 && m==N-1)
                        {
                            sumaE[paso] += s[N-1][N-1]*(s[0][N-1]+s[N-2][N-1]+s[N-1][0]+s[N-1][N-2]);
                        }
                        //Esquina inferior izquierda
                        else if (n==0 && m==0)
                        {
                            sumaE[paso] += s[0][0]*(s[1][0]+s[N-1][0]+s[0][1]+s[0][N-1]);        
                        }
                        //Esquina inferior derecha
                        else if (n==N-1 && m==0)
                        {
                            sumaE[paso] += s[N-1][0]*(s[0][0]+s[N-2][0]+s[N-1][1]+s[N-1][N-1]);        
                        }
                        //Borde superior
                        else if (n!=0 && n!=N-1 && m==N-1)
                        {
                            sumaE[paso] += s[n][N-1]*(s[n+1][N-1]+s[n-1][N-1]+s[n][0]+s[n][N-2]);        
                        }
                        //Borde inferior
                        else if (n!=0 && n!=N-1 && m==0)
                        {
                            sumaE[paso] += s[n][0]*(s[n+1][0]+s[n-1][0]+s[n][1]+s[n][N-1]);       
                        }
                        //Borde derecho
                        else if (n==N-1 && m!=0 && m!=N-1)
                        {
                            sumaE[paso] += s[N-1][m]*(s[0][m]+s[N-2][m]+s[N-1][m+1]+s[N-1][m-1]);        
                        }
                        //Borde izquierdo
                        else if (n==0 && m!=0 && m!=N-1)
                        {
                            sumaE[paso] += s[0][m]*(s[1][m]+s[N-1][m]+s[0][m+1]+s[0][m-1]);        
                        }
                        //Interior
                        else 
                        {
                            sumaE[paso] += s[n][m]*(s[n+1][m]+s[n-1][m]+s[n][m+1]+s[n][m-1]);        
                        }
                    }
                }
                E[paso] = -0.5*sumaE[paso]/(N*N); 
                //Para el calor específico: E(S)², para el promedio del cuadrado     
                E2[paso] = 0.25*sumaE[paso]*sumaE[paso];
                //Para el calor específico, para el cuadrado del promedio 
                E3[paso] = -0.5*sumaE[paso];      

                //-----------------------------------------------------------//


                //----------------FUNCIÓN DE CORRELACIÓN---------------------//
                //for(i=0; i<=9999; i++)
                //{
                    for(j=0; j<=N-1; j++)
                    {
                        correl[i][j] = 0.;
                        correl[paso][j] = 0.;    
                    }
                //}

                for(i=0; i<=N-1; i++)
                {
                    for(n=0; n<=N-1; n++)
                    {
                        for(m=0; m<=N-1; m++)
                        {
                            if(n < N-1)
                            {
                                correl[paso][i] += s[n][m]*s[n+i][m]/(N*N);
                            }
                            else 
                            {
                                correl[paso][i] += s[n][m]*s[0][m]/(N*N);
                            }

                        }    
                    }
                    //printf("%lf\t%i\t%i\t%lf\n", T, paso, i, correl[paso][i]);
                }


                //-----------------------------------------------------------//
            }


        }//pMC


        //------------------------Magnetización promedio---------------------//
        MagPro = 0.;
        for (i=0; i<=9999; i++)
        {
            MagPro = MagPro + Mag[i]/10000.;
        } 

   
                            //Error magnetización promedio
        sigma = 0;
        for (i=0; i<=9999; i++)
        {
            sigma = sigma + ((Mag[i] - MagPro)*(Mag[i] - MagPro));
        }
        sigma = sigma / 10000.; 
        errorMag = sqrt(sigma) / sqrt(10000.);
        fprintf (f2, "%lf\t%lf\t%lf\n", T, MagPro, errorMag);
        printf ("%lf\t%lf\t%lf\n", T, MagPro, errorMag);
        //-------------------------------------------------------------------//

        //--------------------------ENERGÍA PROMEDIO-------------------------//
        EPro = 0.;
        for (i=0; i<=9999; i++)
        {
            EPro += E[i]/10000.;
        }
                                //Error energía media
        sigma_energia = 0.;
        for (i=0; i<=9999; i++)
        {
            sigma_energia = sigma_energia + ((E[i]-EPro)*(E[i]-EPro));
        }
        sigma_energia = sigma_energia / 10000.;
        errorE = 3*sqrt(sigma_energia)/sqrt(10000.);
        fprintf (f3, "%lf\t%lf\t%lf\n", T, EPro, errorE);
        //-------------------------------------------------------------------//

        //--------------------------CALOR ESPECÍFICO-------------------------//
        E2Pro = 0.;
        EPro2 = 0.;
        for (i=0; i<=9999; i++)
        {
            E2Pro = E2Pro + E2[i];
            EPro2 = EPro2 + E3[i];
        }
        E2Pro = E2Pro / 10000.;
        EPro2 = (EPro2*EPro2) / 100000000.;

        CalorEsp = (E2Pro - EPro2) / (N*N*T);

                                //Error calor específico
        sigma_calor = 0.;
        for (i=0; i<=9999; i++)
        {
            sigma_calor = sigma_calor + (((E2[i]-(E3[i]*E3[i]))-CalorEsp)*((E2[i]-(E3[i]*E3[i]))-CalorEsp));
        }
        sigma_calor = sigma_calor / 10000.;
        errorCalor = 3*sqrt(sigma_calor)/sqrt(1000.);
        fprintf (f4, "%lf\t%lf\t%lf\n", T, CalorEsp, errorCalor);
        //-------------------------------------------------------------------//

        //----------------------FUNCIÓN DE CORRELACIÓN-----------------------//
        for(i=0; i<=N-1; i++)
        {
            fcorr[i] = 0.;
            sigmafcorr[i] = 0.;
            //errorfcorr[i] = 0.;
        }

        for(i=0; i<=N-1; i++)
        {
            for(j=0; j<=9999; j++)
            {
                fcorr[i] += correl[j][i]/ 10000.;
            }
        }

                            //Error función de correlación
        //printf("Temperatura     Fcorr   Error\n");
        for(i=0; i<=N-1; i++)
        {
            for(j=0; j<=9999; j++)
            {
                sigmafcorr[i] += (correl[j][i]-fcorr[i])*(correl[j][i]-fcorr[i]) / 10000.;
            }
            errorfcorr[i] = 3*sqrt(sigmafcorr[i])/sqrt(N);
            //printf("%lf\t%lf\t%lf\n", T, fcorr[i], errorfcorr[i]);
            fprintf(f5, "%lf\t%lf\t%lf\n", T, fcorr[i], errorfcorr[i]);
        }
        //-------------------------------------------------------------------//

        T = T + 0.2;
    }
   


    //fclose(f1);
    fclose(f5);
    return 0;
}
